create or replace PACKAGE BODY PKG_LOGS AS
--Privates------------------------------------------------------------------------
FUNCTION DATAFY(FILE_NAME IN VARCHAR2) RETURN VARCHAR2 IS
BEGIN
    RETURN TO_CHAR(SYSDATE,'YYYY-MM-DD_')||FILE_NAME;
END DATAFY;
--------------------------------------------------------------------------------
PROCEDURE GET_CONFIGURATION IS
BEGIN
    --REPLACE THOSE QUERIES WITH YOUR CONFIG TABLE QUERIES
    SELECT 'TRUE'   INTO INFO_ENABLED   FROM DUAL;
    SELECT 'TRUE'   INTO ERROR_ENABLED  FROM DUAL;
    SELECT 'TRUE'   INTO WARN_ENABLED   FROM DUAL;
    SELECT 'FALSE'  INTO DEBUG_ENABLED  FROM DUAL;
END;
--------------------------------------------------------------------------------
PROCEDURE LOG_ON_DB(    MODULE_         IN VARCHAR2,
                        MESSAGE_        IN VARCHAR2,
                        STACKTRACE_     IN VARCHAR2,
                        LOG_TYPE_       IN VARCHAR2
                        ) IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    INSERT INTO GENERAL_LOG (
        LOG_SESSION, ORIGIN, MODULE, MESSAGE, STACKTRACE, LOG_TYPE, LOG_FILE
    ) VALUES (
        GUID, ORIGIN, MODULE_, MESSAGE_, STACKTRACE_, LOG_TYPE_, FILE_LOG
    );
    COMMIT;
END LOG_ON_DB;
--------------------------------------------------------------------------------
PROCEDURE LOG_ON_FILE(MODULE IN VARCHAR2, MESSAGE IN VARCHAR2, STACKTRACE IN VARCHAR2, LOG_TYPE IN VARCHAR2) IS
    PTR_FILE_IN UTL_FILE.FILE_TYPE;
    LOGLINE CLOB := '['||LOG_TYPE||'] '||MODULE||' - '||MESSAGE;
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    IF STACKTRACE IS NOT NULL THEN
        LOGLINE := LOGLINE || ' - ' || STACKTRACE;
    END IF;
    PTR_FILE_IN := UTL_FILE.FOPEN(CARTELLA_LOG, FILE_LOG, 'a');
    UTL_FILE.PUT_LINE(PTR_FILE_IN, TO_CHAR(systimestamp,'yyyy/mm/dd HH24:MI:SS') || ' ' || GUID || ' ' || LOGLINE);
    UTL_FILE.FFLUSH(PTR_FILE_IN);
    UTL_FILE.FCLOSE(PTR_FILE_IN);
END LOG_ON_FILE;
--------------------------------------------------------------------------------
PROCEDURE LOG_LINE(MODULE IN VARCHAR2, MESSAGE IN VARCHAR2, STACKTRACE IN VARCHAR2, LOG_TYPE IN VARCHAR2) IS
BEGIN
    IF LOG_DESTINATION = 'FILE' THEN
        LOG_ON_FILE(MODULE, MESSAGE, STACKTRACE, LOG_TYPE);
    ELSIF LOG_DESTINATION = 'DB' THEN
        LOG_ON_DB(MODULE, MESSAGE, STACKTRACE, LOG_TYPE);
    ELSIF LOG_DESTINATION = 'COMBO' THEN
        LOG_ON_FILE(MODULE, MESSAGE, STACKTRACE, LOG_TYPE);
        LOG_ON_DB(MODULE, MESSAGE, STACKTRACE, LOG_TYPE);
    ELSE
        RAISE_APPLICATION_ERROR(-21219, 'LOG_DESTINATION not valid. Valid parameters: FILE or DB or COMBO');
    END IF;
END LOG_LINE;
--Public------------------------------------------------------------------------
PROCEDURE LOG_INIT(ORIGIN_IN IN VARCHAR2, CARTELLA_IN IN VARCHAR2, FILE_IN IN VARCHAR2, GUID_IN IN VARCHAR2) IS
BEGIN
    /* --In case you do have a config/params/constants table retrieve from there the LOG_DESTINATION value
    DECLARE
        LD VARCHAR2(10);
    BEGIN
        SELECT CONFIG_VALUE INTO LD FROM CONFIG_TABLE WHERE CONFIG_PARAM = 'LOG_DESTINATION';
        CONFIG_LOG_DESTINATION(LD);
    END;
    */
    IF ORIGIN_IN IS NOT NULL THEN
        ORIGIN := ORIGIN_IN;
    END IF;
  
    IF GUID_IN IS NOT NULL THEN
        GUID := GUID_IN;
    ELSE
        GUID := SYS_GUID();
    END IF;

    IF FILE_IN IS NOT NULL THEN
        FILE_LOG := DATAFY(FILE_IN);
    END IF;

    IF CARTELLA_IN IS NOT NULL THEN
        CARTELLA_LOG := CARTELLA_IN;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
    LOG_LINE('LOG_INIT','[LOG_ERROR][LOG_INIT]',SQLERRM||' - '||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,'ERROR');
END LOG_INIT;
--------------------------------------------------------------------------------
PROCEDURE CONFIG_LOG_DESTINATION(LOG_DESTINATION_IN IN VARCHAR2 DEFAULT 'FILE') IS
--Manual configuration of LOG_DESTINATION
BEGIN
    IF LOG_DESTINATION_IN = 'FILE' THEN 
        LOG_DESTINATION := 'FILE';
    ELSIF LOG_DESTINATION_IN = 'DB' THEN 
        LOG_DESTINATION := 'DB';
    ELSIF LOG_DESTINATION_IN = 'COMBO' THEN
        LOG_DESTINATION := 'COMBO';
    ELSE 
        RAISE_APPLICATION_ERROR(-21210, 'LOG_DESTINATION not valid. Valid parameters: FILE or DB or COMBO');
    END IF;
END CONFIG_LOG_DESTINATION;
--------------------------------------------------------------------------------
PROCEDURE LOG_WARN(MODULE IN VARCHAR2, MESSAGE IN VARCHAR2) IS
BEGIN
    IF WARN_ENABLED = 'TRUE' THEN
        LOG_LINE(MODULE, MESSAGE, null, 'WARN');
    END IF;
END LOG_WARN;
--------------------------------------------------------------------------------
PROCEDURE LOG_INFO(MODULE IN VARCHAR2, MESSAGE IN VARCHAR2) IS
BEGIN
    IF INFO_ENABLED = 'TRUE' THEN
        LOG_LINE(MODULE,MESSAGE,NULL,'INFO');
    END IF;
END LOG_INFO;
--------------------------------------------------------------------------------
PROCEDURE LOG_DEBUG(MODULE IN VARCHAR2, MESSAGE IN VARCHAR2) IS
BEGIN
    IF DEBUG_ENABLED = 'TRUE' THEN
        LOG_LINE(MODULE,MESSAGE,NULL,'DEBUG');
    END IF;
END LOG_DEBUG;
--------------------------------------------------------------------------------
PROCEDURE LOG_ERROR(MODULE IN VARCHAR2, MESSAGE IN VARCHAR2, STACKTRACE IN VARCHAR2) IS
BEGIN
    IF ERROR_ENABLED = 'TRUE' THEN
        LOG_LINE(MODULE,MESSAGE,STACKTRACE,'ERROR');
    END IF;
END LOG_ERROR;
--------------------------------------------------------------------------------
END PKG_LOGS;
/